В файле "PriorityQueue.hpp" лежит основыной класс PriorityQueue, который представляет собой аналог std::priority_queue. У него четыре template-arguments: тип значений, которые храняться в PQ, тип приоритета - это может быть любой класс, главное чтобы у него был определен operator<, или же написать для него свой компаратор и передать его. По умолчанию тип приориета - long long. Третий тип - компаратор. По умолчанию он std::less<TPriority>, то есть сравнивает приоритеты с помощью operator<. Четвертый тип - контейнер, который реализует непосредственно PQ. По умолчанию это обычная бинарная куча. Контейнер должен реализовывать интерфейс IPriorityQueue, который находиться в файлe "IPriorityQueue.hpp".

Члены класса Priority Queue
Empty() - проверяет пуста ли PQ
Size() - возвращает размер PQ
Top() - возвращает константную ссылку на верхний элемент
Pop() - убирает верхний элемент. Бросает PriorityQueueException, если PQ пуста.
Push(value, priority) - добавляет элемент value  с приоритетом priority в PQ. возвращает уникальный id элемента. Это id может быть использован в UpdateKey, чтобы изменить приоритет элемента
UpdateKey(id, newPriority) - обновляет приоритет элемента. Принимает id элемента, полученным в Push и новый приоритет. ВАЖНО - новый приоритет должен быть меньше предыдущего, если куча минимизирующая(минимальный элемент на верху). И наоборот - больше, если куча максимизирующая. Бросает PriorityQueueException, если нет элемента с таким id  в PQ или еслии не выполнено предыдущее замечание.

Также я реализовал два контейнера для PQ - BinaryHeap ("BinaryHeap.hpp") и BinominalHeap("BinominalHeap.hpp").

В файле "tests.cpp" написал несколько тестов, проверяющих коректность работы PQ. Они реализованны с помощью BOOST_AUTO_TEST. Не удивляетесь что так долго работают тесты. Там есть нагрузочные тесты на 10^6 элементов, учитывая что все в биноминальной куче работает за log(n), отсюда и получаем большое время работы. 

Также есть Makefile, можно с помощью него успешно собрать проект. Потребуется boost (внутри подключается boost_system). Компилируется с помощью g++ (Версия 4.8.2) или clang++ (версия 3.4).


